{"version":3,"sources":["decomp.js","network.js","sequences.js","tree.js","yoy.js","lift.js","structure.js"],"names":["type","d","i","columns","t","length","total","parseTime","d3","timeParse","date","dblclick","select","this","classed","fixed","dragstart","createVisualization","json","initializeBreadcrumbTrail","drawLegend","on","toggleLegend","vis","append","attr","radius","style","nodes","partition","filter","dx","path","data","selectAll","enter","depth","arc","colors","name","mouseover","mouseleave","totalSize","node","__data__","value","percentage","toPrecision","percentageString","text","sequenceArray","getAncestors","updateBreadcrumbs","indexOf","transition","duration","each","current","parent","unshift","trail","width","breadcrumbPoints","points","push","b","w","h","join","nodeArray","g","entering","s","exit","remove","li","r","legend","keys","entries","key","buildHierarchy","csv","root","children","sequence","size","isNaN","parts","split","currentNode","j","childNode","nodeName","foundChild","k","update","source","tree","reverse","links","forEach","y","svg","id","nodeEnter","y0","x0","click","_children","nodeUpdate","x","nodeExit","link","target","insert","o","diagonal","dollarFormatter","n","Math","round","result","abs","height","margin","top","right","bottom","left","scaleTime","rangeRound","scaleLinear","z","scaleOrdinal","schemeCategory10","stack","error","domain","extent","max","nice","slice","call","axisBottom","axisLeft","ticks","pop","actual","line","close","counterfactual","open","incremental","area","y1","datum","fill","scale","category20","grav","container","force","layout","charge","friction","linkDistance","linkStrength","gravity","theta","drag","start","weight","grouping","sqrt","weighting","e","min","home","product","search","account","other","end","PI","startAngle","endAngle","innerRadius","outerRadius","dy","parseRows","structureVis","structg","console","log","projection","flare","collapse","self","frameElement","padding","yoyx","scaleBand","paddingInner","yoyy","range","yoyxaxis","yoyyaxis","tickFormat","chart","cumulative","class","map","bar","bandwidth"],"mappings":"AA2FA,QAAAA,MAAAC,EAAAC,EAAAC,GACA,IAAAD,EAAA,EAAAE,EAAA,EAAAF,EAAAC,EAAAE,SAAAH,EAAAE,GAAAH,EAAAE,EAAAD,KAAAD,EAAAE,EAAAD,GACAD,GAAAK,MAAAF,CAEA,IAAAG,GAAAC,GAAAC,UAAA,WAGA,OAFAR,GAAAS,KAAAH,EAAAN,EAAAS,MAEAT,EC7FA,QAAAU,UAAAV,GACAO,GAAAI,OAAAC,MAAAC,QAAA,QAAAb,EAAAc,MAAA,WACA,MAAA,IAAAd,EAAAc,QAKA,QAAAC,WAAAf,GACAO,GAAAI,OAAAC,MAAAC,QAAA,QAAAb,EAAAc,OAAA,GCoCA,QAAAE,qBAAAC,GAGAC,4BACAC,aACAZ,GAAAI,OAAA,iBAAAS,GAAA,QAAAC,cAIAC,IAAAC,OAAA,cACAC,KAAA,IAAAC,QACAC,MAAA,UAAA,EAGA,IAAAC,GAAAC,UAAAD,MAAAV,GACAY,OAAA,SAAA7B,GACA,MAAAA,GAAA8B,GAAA,OAGAC,EAAAT,IAAAU,MAAAf,IAAAgB,UAAA,QACAD,KAAAL,GACAO,QAAAX,OAAA,YACAC,KAAA,UAAA,SAAAxB,GAAA,MAAAA,GAAAmC,MAAA,KAAA,SACAX,KAAA,IAAAY,KACAZ,KAAA,YAAA,WACAE,MAAA,OAAA,SAAA1B,GAAA,MAAAqC,QAAArC,EAAAsC,QACAZ,MAAA,UAAA,GACAN,GAAA,YAAAmB,UAGAhC,IAAAI,OAAA,cAAAS,GAAA,aAAAoB,YAGAC,UAAAV,EAAAW,OAAAC,SAAAC,MAIA,QAAAL,WAAAvC,GAEA,GAAA6C,IAAA,IAAA7C,EAAA4C,MAAAH,WAAAK,YAAA,GACAC,EAAAF,EAAA,GACAA,GAAA,KACAE,EAAA,UAGAxC,GAAAI,OAAA,eACAqC,KAAAD,GAEAxC,GAAAI,OAAA,gBACAe,MAAA,aAAA,GAEA,IAAAuB,GAAAC,aAAAlD,EACAmD,mBAAAF,EAAAF,GAGAxC,GAAA0B,UAAA,QACAP,MAAA,UAAA,IAGAJ,IAAAW,UAAA,QACAJ,OAAA,SAAAa,GACA,MAAAO,GAAAG,QAAAV,IAAA,IAEAhB,MAAA,UAAA,GAIA,QAAAc,YAAAxC,GAGAO,GAAAI,OAAA,UACAe,MAAA,aAAA,UAGAnB,GAAA0B,UAAA,QAAAb,GAAA,YAAA,MAGAb,GAAA0B,UAAA,QACAoB,aACAC,SAAA,KACA5B,MAAA,UAAA,GACA6B,KAAA,MAAA,WACAhD,GAAAI,OAAAC,MAAAQ,GAAA,YAAAmB,aAGAhC,GAAAI,OAAA,gBACAe,MAAA,aAAA,UAKA,QAAAwB,cAAAR,GAGA,IAFA,GAAAX,MACAyB,EAAAd,EACAc,EAAAC,QACA1B,EAAA2B,QAAAF,GACAA,EAAAA,EAAAC,MAEA,OAAA1B,GAGA,QAAAb,6BAEA,GAAAyC,GAAApD,GAAAI,OAAA,aAAAY,OAAA,WACAC,KAAA,QAAAoC,OACApC,KAAA,SAAA,IACAA,KAAA,KAAA,QAEAmC,GAAApC,OAAA,YACAC,KAAA,KAAA,YACAE,MAAA,OAAA,QAIA,QAAAmC,kBAAA7D,EAAAC,GACA,GAAA6D,KASA,OARAA,GAAAC,KAAA,OACAD,EAAAC,KAAAC,EAAAC,EAAA,MACAH,EAAAC,KAAAC,EAAAC,EAAAD,EAAA7D,EAAA,IAAA6D,EAAAE,EAAA,GACAJ,EAAAC,KAAAC,EAAAC,EAAA,IAAAD,EAAAE,GACAJ,EAAAC,KAAA,KAAAC,EAAAE,GACAjE,EAAA,GACA6D,EAAAC,KAAAC,EAAA7D,EAAA,IAAA6D,EAAAE,EAAA,GAEAJ,EAAAK,KAAA,KAIA,QAAAhB,mBAAAiB,EAAArB,GAGA,GAAAsB,GAAA9D,GAAAI,OAAA,UACAsB,UAAA,KACAD,KAAAoC,EAAA,SAAApE,GAAA,MAAAA,GAAAsC,KAAAtC,EAAAmC,QAGAmC,EAAAD,EAAAnC,QAAAX,OAAA,QAEA+C,GAAA/C,OAAA,eACAC,KAAA,SAAAqC,kBACAnC,MAAA,OAAA,SAAA1B,GAAA,MAAAqC,QAAArC,EAAAsC,QAEAgC,EAAA/C,OAAA,YACAC,KAAA,KAAAwC,EAAAC,EAAAD,EAAA7D,GAAA,GACAqB,KAAA,IAAAwC,EAAAE,EAAA,GACA1C,KAAA,KAAA,UACAA,KAAA,cAAA,UACAwB,KAAA,SAAAhD,GAAA,MAAAA,GAAAsC,OAGA+B,EAAA7C,KAAA,YAAA,SAAAxB,EAAAC,GACA,MAAA,aAAAA,GAAA+D,EAAAC,EAAAD,EAAAO,GAAA,SAIAF,EAAAG,OAAAC,SAGAlE,GAAAI,OAAA,UAAAA,OAAA,aACAa,KAAA,KAAA4C,EAAAhE,OAAA,KAAA4D,EAAAC,EAAAD,EAAAO,IACA/C,KAAA,IAAAwC,EAAAE,EAAA,GACA1C,KAAA,KAAA,UACAA,KAAA,cAAA,UACAwB,KAAAD,GAGAxC,GAAAI,OAAA,UACAe,MAAA,aAAA,IAIA,QAAAP,cAGA,GAAAuD,IACAT,EAAA,GAAAC,EAAA,GAAAK,EAAA,EAAAI,EAAA,GAGAC,EAAArE,GAAAI,OAAA,WAAAY,OAAA,WACAC,KAAA,QAAAkD,EAAAT,GACAzC,KAAA,SAAAjB,GAAAsE,KAAAxC,QAAAjC,QAAAsE,EAAAR,EAAAQ,EAAAH,IAEAF,EAAAO,EAAA3C,UAAA,KACAD,KAAAzB,GAAAuE,QAAAzC,SACAH,QAAAX,OAAA,SACAC,KAAA,YAAA,SAAAxB,EAAAC,GACA,MAAA,eAAAA,GAAAyE,EAAAR,EAAAQ,EAAAH,GAAA,KAGAF,GAAA9C,OAAA,YACAC,KAAA,KAAAkD,EAAAC,GACAnD,KAAA,KAAAkD,EAAAC,GACAnD,KAAA,QAAAkD,EAAAT,GACAzC,KAAA,SAAAkD,EAAAR,GACAxC,MAAA,OAAA,SAAA1B,GAAA,MAAAA,GAAA4C,QAEAyB,EAAA9C,OAAA,YACAC,KAAA,IAAAkD,EAAAT,EAAA,GACAzC,KAAA,IAAAkD,EAAAR,EAAA,GACA1C,KAAA,KAAA,UACAA,KAAA,cAAA,UACAwB,KAAA,SAAAhD,GAAA,MAAAA,GAAA+E,MAGA,QAAA1D,gBACA,GAAAuD,GAAArE,GAAAI,OAAA,UACA,WAAAiE,EAAAlD,MAAA,cACAkD,EAAAlD,MAAA,aAAA,IAEAkD,EAAAlD,MAAA,aAAA,UAQA,QAAAsD,gBAAAC,GAEA,IAAA,GADAC,IAAA5C,KAAA,OAAA6C,aACAlF,EAAA,EAAAA,EAAAgF,EAAA7E,OAAAH,IAAA,CACA,GAAAmF,GAAAH,EAAAhF,GAAA,GACAoF,GAAAJ,EAAAhF,GAAA,EACA,KAAAqF,MAAAD,GAKA,IAAA,GAFAE,GAAAH,EAAAI,MAAA,KACAC,EAAAP,EACAQ,EAAA,EAAAA,EAAAH,EAAAnF,OAAAsF,IAAA,CACA,GAEAC,GAFAR,EAAAM,EAAA,SACAG,EAAAL,EAAAG,EAEA,IAAAA,EAAA,EAAAH,EAAAnF,OAAA,CAGA,IAAA,GADAyF,IAAA,EACAC,EAAA,EAAAA,EAAAX,EAAA/E,OAAA0F,IACA,GAAAX,EAAAW,GAAA,MAAAF,EAAA,CACAD,EAAAR,EAAAW,GACAD,GAAA,CACA,OAIAA,IACAF,GAAArD,KAAAsD,EAAAT,aACAA,EAAApB,KAAA4B,IAEAF,EAAAE,MAGAA,IAAArD,KAAAsD,EAAAP,KAAAA,GACAF,EAAApB,KAAA4B,IAIA,MAAAT,GCtQA,QAAAa,QAAAC,GAGA,GAAArE,GAAAsE,KAAAtE,MAAAuD,MAAAgB,UACAC,EAAAF,KAAAE,MAAAxE,EAGAA,GAAAyE,QAAA,SAAApG,GAAAA,EAAAqG,EAAA,IAAArG,EAAAmC,OAGA,IAAAO,GAAA4D,IAAArE,UAAA,UACAD,KAAAL,EAAA,SAAA3B,GAAA,MAAAA,GAAAuG,KAAAvG,EAAAuG,KAAAtG,KAGAuG,EAAA9D,EAAAR,QAAAX,OAAA,KACAC,KAAA,QAAA,QACAA,KAAA,YAAA,SAAAxB,GAAA,MAAA,aAAAgG,EAAAS,GAAA,IAAAT,EAAAU,GAAA,MACAtF,GAAA,QAAAuF,MAEAH,GAAAjF,OAAA,UACAC,KAAA,IAAA,MACAE,MAAA,OAAA,SAAA1B,GAAA,MAAAA,GAAA4G,UAAA,iBAAA,SAEAJ,EAAAjF,OAAA,QACAC,KAAA,IAAA,SAAAxB,GAAA,MAAAA,GAAAmF,UAAAnF,EAAA4G,cAAA,KACApF,KAAA,KAAA,SACAA,KAAA,cAAA,SAAAxB,GAAA,MAAAA,GAAAmF,UAAAnF,EAAA4G,UAAA,MAAA,UACA5D,KAAA,SAAAhD,GAAA,MAAAA,GAAAsC,OACAZ,MAAA,eAAA,KAGA,IAAAmF,GAAAnE,EAAAW,aACAC,SAAAA,UACA9B,KAAA,YAAA,SAAAxB,GAAA,MAAA,aAAAA,EAAAqG,EAAA,IAAArG,EAAA8G,EAAA,KAEAD,GAAAlG,OAAA,UACAa,KAAA,IAAA,KACAE,MAAA,OAAA,SAAA1B,GAAA,MAAAA,GAAA4G,UAAA,iBAAA,SAEAC,EAAAlG,OAAA,QACAe,MAAA,eAAA,EAGA,IAAAqF,GAAArE,EAAA8B,OAAAnB,aACAC,SAAAA,UACA9B,KAAA,YAAA,SAAAxB,GAAA,MAAA,aAAAgG,EAAAK,EAAA,IAAAL,EAAAc,EAAA,MACArC,QAEAsC,GAAApG,OAAA,UACAa,KAAA,IAAA,MAEAuF,EAAApG,OAAA,QACAe,MAAA,eAAA,KAGA,IAAAsF,GAAAV,IAAArE,UAAA,aACAD,KAAAmE,EAAA,SAAAnG,GAAA,MAAAA,GAAAiH,OAAAV,IAGAS,GAAA9E,QAAAgF,OAAA,OAAA,KACA1F,KAAA,QAAA,QACAA,KAAA,IAAA,SAAAxB,GACA,GAAAmH,IAAAL,EAAAd,EAAAU,GAAAL,EAAAL,EAAAS,GACA,OAAAW,WAAApB,OAAAmB,EAAAF,OAAAE,MAIAH,EAAA3D,aACAC,SAAAA,UACA9B,KAAA,IAAA4F,UAGAJ,EAAAxC,OAAAnB,aACAC,SAAAA,UACA9B,KAAA,IAAA,SAAAxB,GACA,GAAAmH,IAAAL,EAAAd,EAAAc,EAAAT,EAAAL,EAAAK,EACA,OAAAe,WAAApB,OAAAmB,EAAAF,OAAAE,MAEA1C,SAGA9C,EAAAyE,QAAA,SAAApG,GACAA,EAAA0G,GAAA1G,EAAA8G,EACA9G,EAAAyG,GAAAzG,EAAAqG,IAKA,QAAAM,OAAA3G,GACAA,EAAAmF,UACAnF,EAAA4G,UAAA5G,EAAAmF,SACAnF,EAAAmF,SAAA,OAEAnF,EAAAmF,SAAAnF,EAAA4G,UACA5G,EAAA4G,UAAA,MAEAb,OAAA/F,GCvDA,QAAAD,MAAAC,GAEA,MADAA,GAAA4C,OAAA5C,EAAA4C,MACA5C,EAGA,QAAAqH,iBAAAC,GACAA,EAAAC,KAAAC,MAAAF,EACA,IAAAG,GAAAH,CAIA,OAHAC,MAAAG,IAAAJ,GAAA,MACAG,EAAAF,KAAAC,MAAAF,EAAA,KAAA,KAEA,IAAAG,EJ7FA,GAAA7D,OAAA,IACA+D,OAAA,IAEArG,IAAAf,GAAAI,OAAA,WAAAY,OAAA,WACAC,KAAA,QAAAoC,OACApC,KAAA,SAAAmG,QAEAC,QAAAC,IAAA,GAAAC,MAAA,GAAAC,OAAA,GAAAC,KAAA,IACA3D,EAAA/C,IAAAC,OAAA,SAAAC,KAAA,YAAA,aAAAoG,OAAAI,KAAA,IAAAJ,OAAAC,IAAA,KACAjE,OAAAtC,IAAAE,KAAA,SAAAoG,OAAAI,KAAAJ,OAAAE,MACAH,QAAArG,IAAAE,KAAA,UAAAoG,OAAAC,IAAAD,OAAAG,OAEAjB,EAAAvG,GAAA0H,YACAC,YAAA,EAAAtE,QAEAyC,EAAA9F,GAAA4H,cACAD,YAAAP,OAAA,IAEAS,EAAA7H,GAAA8H,aAAA9H,GAAA+H,kBAEAC,MAAAhI,GAAAgI,OASAhI,IAAA0E,IAAA,kBAAAlF,KAAA,SAAAyI,EAAAxG,GACA,GAAAwG,EAAA,KAAAA,EAEA1B,GAAA2B,OAAAlI,GAAAmI,OAAA1G,EAAA,SAAAhC,GAAA,MAAAA,GAAAS,QACA4F,EAAAoC,QAAA,EAAAlI,GAAAoI,IAAA3G,EAAA,SAAAhC,GAAA,MAAAA,GAAAK,UAAAuI,OACAR,EAAAK,OAAAzG,EAAA9B,QAAA2I,MAAA,IAEAxE,EAAApC,UAAA,UACAD,KAAAuG,MAAA1D,KAAA7C,EAAA9B,QAAA2I,MAAA,IAAA7G,IACAE,QAAAX,OAAA,KACAC,KAAA,QAAA,SACAA,KAAA,OAAA,SAAAxB,GAAA,MAAAoI,GAAApI,EAAA+E,OACA9C,UAAA,QACAD,KAAA,SAAAhC,GAAA,MAAAA,KACAkC,QAAAX,OAAA,QACAC,KAAA,IAAA,SAAAxB,GAAA,MAAA8G,GAAA9G,EAAAgC,KAAAvB,QACAe,KAAA,IAAA,SAAAxB,GAAA,MAAAqG,GAAArG,EAAA,MACAwB,KAAA,SAAA,SAAAxB,GAAA,MAAAqG,GAAArG,EAAA,IAAAqG,EAAArG,EAAA,MACAwB,KAAA,QAAA,IA0BA6C,EAAA9C,OAAA,KACAC,KAAA,QAAA,gBACAA,KAAA,YAAA,eAAAmG,OAAA,KACAmB,KAAAvI,GAAAwI,WAAAjC,IAEAzC,EAAA9C,OAAA,KACAC,KAAA,QAAA,gBACAsH,KAAAvI,GAAAyI,SAAA3C,GAAA4C,MAAA,EAAA,MACA1H,OAAA,QACAC,KAAA,IAAA,GACAA,KAAA,IAAA6E,EAAAA,EAAA4C,MAAA,IAAAC,QACA1H,KAAA,KAAA,UACAA,KAAA,cAAA,SACAA,KAAA,OAAA,QACAwB,KAAA,UKvFA,IAAAsD,KAAA/F,GAAAI,OAAA,OACAiH,QAAAC,IAAA,GAAAC,MAAA,GAAAC,OAAA,GAAAC,KAAA,IACApE,OAAA0C,IAAA9E,KAAA,SAAAoG,OAAAI,KAAAJ,OAAAE,MACAH,QAAArB,IAAA9E,KAAA,UAAAoG,OAAAC,IAAAD,OAAAG,OACA1D,EAAAiC,IAAA/E,OAAA,KAAAC,KAAA,YAAA,aAAAoG,OAAAI,KAAA,IAAAJ,OAAAC,IAAA,KAEAvH,UAAAC,GAAAC,UAAA,YAEAsG,EAAAvG,GAAA0H,YACAC,YAAA,EAAAtE,QAEAyC,EAAA9F,GAAA4H,cACAD,YAAAP,OAAA,IAGAwB,OAAA5I,GAAA6I,OACAtC,EAAA,SAAA9G,GAAA,MAAA8G,GAAA9G,EAAAS,QACA4F,EAAA,SAAArG,GAAA,MAAAqG,GAAArG,EAAAqJ,SAGAC,eAAA/I,GAAA6I,OACAtC,EAAA,SAAA9G,GAAA,MAAA8G,GAAA9G,EAAAS,QACA4F,EAAA,SAAArG,GAAA,MAAAqG,GAAArG,EAAAuJ,QAGAC,YAAAjJ,GAAAkJ,OACA3C,EAAA,SAAA9G,EAAAC,GAAA,MAAA6G,GAAA9G,EAAAS,QACAgG,GAAA,SAAAzG,GAAA,MAAAqG,GAAArG,EAAAuJ,QACAG,GAAA,SAAA1J,GAAA,MAAAqG,GAAArG,EAAAqJ,QAEA9I,IAAA0E,IAAA,gBAAA,SAAAjF,GAGA,MAFAA,GAAAS,KAAAH,UAAAN,EAAAS,MACAT,EAAAqJ,OAAArJ,EAAAqJ,MACArJ,GACA,SAAAwI,EAAAxG,GACA,GAAAwG,EAAA,KAAAA,EAEA1B,GAAA2B,OAAAlI,GAAAmI,OAAA1G,EAAA,SAAAhC,GAAA,MAAAA,GAAAS,QACA4F,EAAAoC,OAAAlI,GAAAmI,OAAA1G,EAAA,SAAAhC,GAAA,MAAAA,GAAAqJ,SAEAhF,EAAA9C,OAAA,KACAC,KAAA,QAAA,gBACAA,KAAA,YAAA,eAAAmG,OAAA,KACAmB,KAAAvI,GAAAwI,WAAAjC,IAEAzC,EAAA9C,OAAA,KACAC,KAAA,QAAA,gBACAsH,KAAAvI,GAAAyI,SAAA3C,IACA9E,OAAA,QACAC,KAAA,OAAA,QACAA,KAAA,YAAA,eACAA,KAAA,IAAA,GACAA,KAAA,KAAA,UACAE,MAAA,cAAA,OACAsB,KAAA,cAEAqB,EAAA9C,OAAA,KACAC,KAAA,QAAA,SACAD,OAAA,QACAC,KAAA,YAAA,sBACAA,KAAA,KAAA,KACAA,KAAA,KAAA,KACAA,KAAA,KAAA,KACAA,KAAA,KAAA,KACAA,KAAA,SAAA,QACAA,KAAA,mBAAA,OAEAjB,GAAAI,OAAA,UAAAY,OAAA,QACAC,KAAA,YAAA,qBACAA,KAAA,OAAA,WACAE,MAAA,cAAA,OACAsB,KAAA,oBAGAqB,EAAA9C,OAAA,QACAoI,MAAA3H,GACAR,KAAA,QAAA,UACAA,KAAA,IAAA2H,QAEA9E,EAAA9C,OAAA,QACAoI,MAAA3H,GACAR,KAAA,QAAA,kBACAA,KAAA,IAAA8H,gBAEAjF,EAAA9C,OAAA,QACAoI,MAAA3H,GACAR,KAAA,QAAA,eACAA,KAAA,IAAAgI,cJtFA,IAAAvF,GAAA,IACAC,EAAA,IACA0F,KAAArJ,GAAAsJ,MAAAC,aAaAC,KAAA,GAEAC,UAAAzJ,GAAAI,OAAA,YACAY,OAAA,WACAC,KAAA,QAAAyC,GACAzC,KAAA,SAAA0C,GAEA+F,MAAA1J,GAAA2J,OAAAD,QACA5E,MAAApB,EAAAC,IACAiG,OAAA,SAAAnK,GACA,UAAAA,EAAA,SAEAoK,SAAA,IACAC,aAAA,SAAArK,GACA,MAAA,IAAAA,EAAAgG,OAAA,IAAA,GAAAhG,EAAAiH,OAAA,GACA,IAGA,MAGAqD,aAAA,IACAC,QAAAR,MACAS,MAAA,IAGAC,KAAAR,MAAAQ,OACArJ,GAAA,YAAAL,UAEAR,IAAAU,KAAA,kBAAA,SAAAuH,EAAAvH,GACA,GAAAuH,EAAA,KAAAA,EAEAyB,OACAtI,MAAAV,EAAAU,OACAwE,MAAAlF,EAAAkF,OACAuE,OAEA,IAAA1D,GAAAgD,UAAA/H,UAAA,aACAD,KAAAf,EAAAkF,OACAjE,QAAAX,OAAA,YACAC,KAAA,QAAA,QACAE,MAAA,eAAA,SAAA1B,GAAA,MAAA,IAAAA,EAAA2K,SACAjJ,MAAA,SAAA,SAAA1B,GACA,MAAA,IAAAA,EAAAgG,OAAAO,GACAqD,KAAA5J,EAAAgG,OAAA4E,UAEA,UAEApJ,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAgG,OAAAc,IACAtF,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAgG,OAAAK,IACA7E,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAiH,OAAAH,IACAtF,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAiH,OAAAZ,IAEA3D,EAAAsH,UAAA/H,UAAA,eACAD,KAAAf,EAAAU,OACAO,QAAAX,OAAA,cACAC,KAAA,QAAA,QACAA,KAAA,KAAA,SAAAxB,GACA,MAAA,IAAAA,EAAAuG,IAEAvG,EAAA8G,OACA9G,EAAA8G,GAEA,GAAA9G,EAAAuG,IACAvG,EAAA8G,EAAA,IACA9G,EAAA8G,GAIA,GAAA9G,EAAA4K,WAEApJ,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAqG,IACA7E,KAAA,IAAA,SAAAxB,GAAA,MAAA,KAAAuH,KAAAsD,KAAA7K,EAAA8K,aACApJ,MAAA,OAAA,SAAA1B,GACA,MAAA,IAAAA,EAAAuG,IAAA,GAAAvG,EAAAuG,GACAqD,KAAA5J,EAAA4K,WAGAhB,KAAA5J,EAAA4K,UACA,WAEAxJ,GAAA,WAAAV,UACAoI,KAAA2B,KAEA/H,GAAAnB,OAAA,aACAyB,KAAA,SAAAhD,GAAA,MAAAA,GAAAsC,MAEA,IAAAU,GAAAgH,UAAA/H,UAAA,aACAD,KAAAf,EAAAU,OACAO,QAAAX,OAAA,QACAC,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAA8G,IACAtF,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAqG,IACArD,KAAA,SAAAhD,GAAA,MAAAA,GAAAsC,OACAd,KAAA,YAAA,OAKAwI,WAAAtI,MAAA,UAAA,MACA2B,aACAC,SAAA,KACA5B,MAAA,UAAA,GAEAuI,MAAA7I,GAAA,OAAA,SAAA2J,GACA/D,EAAAxF,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAgG,OAAAc,IACAtF,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAgG,OAAAK,IACA7E,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAiH,OAAAH,IACAtF,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAiH,OAAAZ,IAEA3D,EAAAlB,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAA8G,IACAtF,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAqG,IAEArD,EAAAxB,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAA8G,EAAA,KACAtF,KAAA,KAAA,SAAAxB,GAAA,MAAAA,GAAAqG,EAAA,QChIA,IAAAzC,OAAA,IACA+D,OAAA,IACAlG,OAAA8F,KAAAyD,IAAApH,MAAA+D,QAAA,EAGA3D,GACAC,EAAA,GAAAC,EAAA,GAAAK,EAAA,EAAApE,EAAA,IAIAkC,QACA4I,KAAA,UACAC,QAAA,UACAC,OAAA,UACAC,QAAA,UACAC,MAAA,UACAC,IAAA,WAIA7I,UAAA,EAEAnB,IAAAf,GAAAI,OAAA,UAAAY,OAAA,WACAC,KAAA,QAAAoC,OACApC,KAAA,SAAAmG,QACApG,OAAA,SACAC,KAAA,KAAA,aACAA,KAAA,YAAA,aAAAoC,MAAA,EAAA,IAAA+D,OAAA,EAAA,KAEA/F,UAAArB,GAAA2J,OAAAtI,YACAyD,MAAA,EAAAkC,KAAAgE,GAAA9J,OAAAA,SACAmB,MAAA,SAAA5C,GAAA,MAAAA,GAAAqF,OAEAjD,IAAA7B,GAAA+F,IAAAlE,MACAoJ,WAAA,SAAAxL,GAAA,MAAAA,GAAA8G,IACA2E,SAAA,SAAAzL,GAAA,MAAAA,GAAA8G,EAAA9G,EAAA8B,KACA4J,YAAA,SAAA1L,GAAA,MAAAuH,MAAAsD,KAAA7K,EAAAqG,KACAsF,YAAA,SAAA3L,GAAA,MAAAuH,MAAAsD,KAAA7K,EAAAqG,EAAArG,EAAA4L,KAIArL,IAAAyC,KAAA,2BAAA,SAAAA,GACA,GAAAiC,GAAA1E,GAAA0E,IAAA4G,UAAA7I,GACA/B,EAAA+D,eAAAC,EACAjE,qBAAAC,II7CA,IAAA2C,OAAA,IACA+D,OAAA,IAEAmE,aAAAvL,GAAAI,OAAA,cAAAY,OAAA,WACAC,KAAA,QAAAoC,OACApC,KAAA,SAAAmG,QAEAC,QAAAC,IAAA,GAAAC,MAAA,GAAAC,OAAA,GAAAC,KAAA,IACA+D,QAAAD,aAAAvK,OAAA,SAAAC,KAAA,YAAA,aAAAoG,OAAAI,KAAA,IAAAJ,OAAAC,IAAA,KACAjE,OAAAkI,aAAAtK,KAAA,SAAAoG,OAAAI,KAAAJ,OAAAE,MACAH,QAAAmE,aAAAtK,KAAA,UAAAoG,OAAAC,IAAAD,OAAAG,MAEAgE,SAAAxK,OAAA,QACAC,KAAA,IAAA,IACAA,KAAA,IAAA,GACAA,KAAA,SAAA,IACAA,KAAA,QAAA,KACAA,KAAA,OAAA,aACAA,KAAA,QAAA,SACAJ,GAAA,QAAA,WAAA4K,QAAAC,IAAA,aAEAF,QAAAxK,OAAA,QACAyB,KAAA,iBACAxB,KAAA,IAAA,IACAA,KAAA,IAAA,IACAA,KAAA,OAAA,SAEAuK,QAAAxK,OAAA,QACAC,KAAA,IAAA,0BACAA,KAAA,OAAA,eACAA,KAAA,SAAA,SAEAuK,QAAAxK,OAAA,QACAC,KAAA,IAAA,2BACAA,KAAA,OAAA,eACAA,KAAA,SAAA,SAEAuK,QAAAxK,OAAA,QACAC,KAAA,IAAA,2BACAA,KAAA,OAAA,eACAA,KAAA,SAAA,SAEAuK,QAAAxK,OAAA,QACAC,KAAA,IAAA,4BACAA,KAAA,OAAA,eACAA,KAAA,SAAA,SAEAuK,QAAAxK,OAAA,QACAC,KAAA,IAAA,IACAA,KAAA,IAAA,KACAA,KAAA,SAAA,IACAA,KAAA,QAAA,KACAA,KAAA,OAAA,aACAA,KAAA,QAAA,SACAuK,QAAAxK,OAAA,QACAyB,KAAA,UACAxB,KAAA,IAAA,IACAA,KAAA,IAAA,KACAA,KAAA,OAAA,SAEAuK,QAAAxK,OAAA,QACAC,KAAA,IAAA,KACAA,KAAA,IAAA,KACAA,KAAA,SAAA,IACAA,KAAA,QAAA,KACAA,KAAA,OAAA,aACAA,KAAA,QAAA,SACAuK,QAAAxK,OAAA,QACAyB,KAAA,WACAxB,KAAA,IAAA,KACAA,KAAA,IAAA,KACAA,KAAA,OAAA,SAEAuK,QAAAxK,OAAA,QACAC,KAAA,IAAA,GACAA,KAAA,IAAA,KACAA,KAAA,SAAA,IACAA,KAAA,QAAA,IACAA,KAAA,OAAA,aACAA,KAAA,QAAA,SACAuK,QAAAxK,OAAA,QACAyB,KAAA,OACAxB,KAAA,IAAA,IACAA,KAAA,IAAA,KACAA,KAAA,OAAA,SAEAuK,QAAAxK,OAAA,QACAC,KAAA,IAAA,IACAA,KAAA,IAAA,KACAA,KAAA,SAAA,IACAA,KAAA,QAAA,IACAA,KAAA,OAAA,aACAA,KAAA,QAAA,SACAuK,QAAAxK,OAAA,QACAyB,KAAA,UACAxB,KAAA,IAAA,IACAA,KAAA,IAAA,KACAA,KAAA,OAAA,QHjGA,IAAAoG,SAAAC,IAAA,GAAAC,MAAA,IAAAC,OAAA,GAAAC,KAAA,KACApE,MAAA,IAAAgE,OAAAE,MAAAF,OAAAI,KACAL,OAAA,IAAAC,OAAAC,IAAAD,OAAAG,OAEA9H,EAAA,EACAqD,SAAA,IACA4B,KAEAe,KAAA1F,GAAA2J,OAAAjE,OACAZ,MAAAsC,OAAA/D,QAEAwD,SAAA7G,GAAA+F,IAAAc,WACA8E,WAAA,SAAAlM,GAAA,OAAAA,EAAAqG,EAAArG,EAAA8G,KAEAR,IAAA/F,GAAAI,OAAA,SAAAY,OAAA,OACAC,KAAA,QAAAoC,MAAAgE,OAAAE,MAAAF,OAAAI,MACAxG,KAAA,SAAAmG,OAAAC,OAAAC,IAAAD,OAAAG,QACAxG,OAAA,KACAC,KAAA,YAAA,aAAAoG,OAAAI,KAAA,IAAAJ,OAAAC,IAAA,IAEAtH,IAAAU,KAAA,kBAAA,SAAAuH,EAAA2D,GAOA,QAAAC,GAAApM,GACAA,EAAAmF,WACAnF,EAAA4G,UAAA5G,EAAAmF,SACAnF,EAAA4G,UAAAR,QAAAgG,GACApM,EAAAmF,SAAA,MAVA,GAAAqD,EAAA,KAAAA,EAEAtD,MAAAiH,EACAjH,KAAAwB,GAAAiB,OAAA,EACAzC,KAAAuB,GAAA,EAUAvB,KAAAC,SAAAiB,QAAAgG,GACArG,OAAAb,QAGA3E,GAAAI,OAAA0L,KAAAC,cAAA5K,MAAA,SAAA,QCvCA,IAAAkG,SAAAC,IAAA,GAAAC,MAAA,GAAAC,OAAA,GAAAC,KAAA,IACApE,MAAA,IAAAgE,OAAAI,KAAAJ,OAAAE,MACAH,OAAA,IAAAC,OAAAC,IAAAD,OAAAG,OACAwE,QAAA,GAEAC,KAAAjM,GAAAkM,YACAvE,YAAA,EAAAtE,QACA8I,aAAAH,SAEAI,KAAApM,GAAA4H,cACAyE,OAAAjF,OAAA,IAEAkF,SAAAtM,GAAAwI,aACAc,MAAA2C,MAEAM,SAAAvM,GAAAyI,WACAa,MAAA8C,MACAI,WAAA,SAAA/M,GAAA,MAAAqH,iBAAArH,KAEAgN,MAAAzM,GAAAI,OAAA,QACAY,OAAA,WACAC,KAAA,QAAAoC,MAAAgE,OAAAI,KAAAJ,OAAAE,OACAtG,KAAA,SAAAmG,OAAAC,OAAAC,IAAAD,OAAAG,QACAxG,OAAA,KACAC,KAAA,YAAA,aAAAoG,OAAAI,KAAA,IAAAJ,OAAAC,IAAA,IAEAtH,IAAA0E,IAAA,eAAAlF,KAAA,SAAAyI,EAAAxG,GAIA,IAAA,GADAiL,GAAA,EACAhN,EAAA,EAAAA,EAAA+B,EAAA5B,OAAAH,IACA+B,EAAA/B,GAAAyK,MAAAuC,EACAA,GAAAjL,EAAA/B,GAAA2C,MACAZ,EAAA/B,GAAAqL,IAAA2B,EAEAjL,EAAA/B,GAAA+B,SAAAA,EAAA/B,GAAA2C,OAAA,EAAA,WAAA,UAEAZ,GAAA+B,MACAzB,KAAA,eACAgJ,IAAA2B,EACAvC,MAAA,EACAwC,QAAA,UAEAlB,QAAAC,IAAAjK,GAEAwK,KAAA/D,OAAAzG,EAAAmL,IAAA,SAAAnN,GAAA,MAAAA,GAAAsC,QACAqK,KAAAlE,QAAA,EAAAlI,GAAAoI,IAAA3G,EAAA,SAAAhC,GAAA,MAAAA,GAAAsL,QAEA0B,MAAAzL,OAAA,KACAC,KAAA,QAAA,UACAA,KAAA,YAAA,qBACAsH,KAAA+D,UAEAG,MAAAzL,OAAA,KACAC,KAAA,QAAA,UACAsH,KAAAgE,SAEA,IAAAM,GAAAJ,MAAA/K,UAAA,QACAD,KAAAA,GACAE,QAAAX,OAAA,KACAC,KAAA,QAAA,SAAAxB,GAAA,MAAA,OAAAA,EAAAA,WACAwB,KAAA,YAAA,SAAAxB,GAAA,MAAA,aAAAwM,KAAAxM,EAAAsC,MAAA,OAEA8K,GAAA7L,OAAA,QACAC,KAAA,IAAA,SAAAxB,GAAA,MAAA2M,MAAApF,KAAAoB,IAAA3I,EAAA0K,MAAA1K,EAAAsL,QACA9J,KAAA,SAAA,SAAAxB,GAAA,MAAAuH,MAAAG,IAAAiF,KAAA3M,EAAA0K,OAAAiC,KAAA3M,EAAAsL,QACA9J,KAAA,QAAAgL,KAAAa,aAEAD,EAAA7L,OAAA,QACAC,KAAA,IAAAgL,KAAAa,YAAA,GACA7L,KAAA,IAAA,SAAAxB,GAAA,MAAA2M,MAAA3M,EAAAsL,KAAA,IACA9J,KAAA,KAAA,SAAAxB,GAAA,OAAA,YAAAA,EAAAA,SAAA,IAAA,IAAA,UACAgD,KAAA,SAAAhD,GAAA,MAAAqH,iBAAArH,EAAAsL,IAAAtL,EAAA0K,SAEA0C,EAAAvL,OAAA,SAAA7B,GAAA,MAAA,SAAAA,EAAAA,WAAAuB,OAAA,QACAC,KAAA,QAAA,aACAA,KAAA,KAAAgL,KAAAa,YAAA,GACA7L,KAAA,KAAA,SAAAxB,GAAA,MAAA2M,MAAA3M,EAAAsL,OACA9J,KAAA,KAAAgL,KAAAa,aAAA,EAAAd,SAAA,GACA/K,KAAA,KAAA,SAAAxB,GAAA,MAAA2M,MAAA3M,EAAAsL","file":"main.min.js","sourcesContent":["var width = 950;\r\nvar height = 400;\r\n\r\nvar vis = d3.select(\"#decomp\").append(\"svg:svg\")\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", height)\r\n\nvar margin = {top: 20, right: 20, bottom: 30, left: 50},\n    g = vis.append(\"svg:g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"),\n    width = +vis.attr(\"width\") - margin.left - margin.right,\n    height = +vis.attr(\"height\") - margin.top - margin.bottom;\n\r\nvar x = d3.scaleTime()\r\n    .rangeRound([0, width]);\r\n\r\nvar y = d3.scaleLinear()\r\n    .rangeRound([height, 0]);\r\n\r\nvar z = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\nvar stack = d3.stack();\n\r\n/*\r\nvar area = d3.area()\r\n    .x(function(d, i) { return x(d.data.date); })\r\n    .y0(function(d) { return y(d[0]); })\r\n    .y1(function(d) { return y(d[1]); });\r\n*/\r\n\r\nd3.csv(\"data/decomp.csv\", type, function(error, data) {\r\n  if (error) throw error;\r\n\r\n  x.domain(d3.extent(data, function(d) { return d.date; }));\r\n  y.domain([0, d3.max(data, function(d) { return d.total; })]).nice();\r\n  z.domain(data.columns.slice(1));\r\n\r\n  g.selectAll(\".serie\")\r\n    .data(stack.keys(data.columns.slice(1))(data))\r\n    .enter().append(\"g\")\r\n      .attr(\"class\", \"serie\")\r\n      .attr(\"fill\", function(d) { return z(d.key); })\r\n    .selectAll(\"rect\")\r\n    .data(function(d) { return d; })\r\n    .enter().append(\"rect\")\r\n      .attr(\"x\", function(d) { return x(d.data.date); })\r\n      .attr(\"y\", function(d) { return y(d[1]); })\r\n      .attr(\"height\", function(d) { return y(d[0]) - y(d[1]); })\r\n      .attr(\"width\", 16);\r\n\r\n/*\r\n  var keys = data.columns.slice(1);\r\n  stack.keys(keys);\r\n\r\n  var layer = g.selectAll(\".layer\")\r\n     .data(stack(data))\r\n     .enter().append(\"g\")\r\n       .attr(\"class\", \"layer\");\r\n\r\n   layer.append(\"path\")\r\n       .attr(\"class\", \"area\")\r\n       .style(\"fill\", function(d) { return z(d.key); })\r\n       .attr(\"d\", area);\r\n\r\n   layer.filter(function(d) { return d[d.length - 1][1] - d[d.length - 1][0] > 0.01; })\r\n     .append(\"text\")\r\n       .attr(\"x\", width - 6)\r\n       .attr(\"y\", function(d) { return y((d[d.length - 1][0] + d[d.length - 1][1]) / 2); })\r\n       .attr(\"dy\", \".35em\")\r\n       .style(\"font\", \"10px sans-serif\")\r\n       .style(\"text-anchor\", \"end\")\r\n       .text(function(d) { return d.key; });\r\n*/\r\n\r\n  g.append(\"g\")\r\n      .attr(\"class\", \"axis axis--x\")\r\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n      .call(d3.axisBottom(x));\r\n\r\n  g.append(\"g\")\r\n      .attr(\"class\", \"axis axis--y\")\r\n      .call(d3.axisLeft(y).ticks(3, \"s\"))\r\n    .append(\"text\")\r\n      .attr(\"x\", 2)\r\n      .attr(\"y\", y(y.ticks(10).pop()))\r\n      .attr(\"dy\", \"0.35em\")\r\n      .attr(\"text-anchor\", \"start\")\r\n      .attr(\"fill\", \"#000\")\r\n      .text(\"Sales\");\r\n});\r\n/**/\r\n\r\nfunction type(d, i, columns) {\r\n  for (i = 1, t = 0; i < columns.length; ++i) t += d[columns[i]] = +d[columns[i]];\r\n  d.total = t;\r\n\r\n  var parseTime = d3.timeParse(\"%d-%b-%Y\");\r\n  d.date = parseTime(d.date);\r\n\r\n  return d;\r\n}\r\n","\r\nvar w = 900,\r\n    h = 650,\r\n    fill = d3.scale.category20();\r\n\r\nfunction dblclick(d) {\t\t\t//Double click fixes node, click or drag unfixes it\r\n d3.select(this).classed(\"fixed\", d.fixed = (function(){\r\n\t if (d.fixed == true){ return false; }\r\n\t else return true;\r\n }));\r\n}\r\n\r\nfunction dragstart(d) {\r\n  d3.select(this).classed(\"fixed\", d.fixed = true);\r\n}\r\n\r\nvar grav = 0.2;\r\n\r\nvar container = d3.select(\"#network\")\r\n  .append(\"svg:svg\")\r\n  .attr(\"width\", w)\r\n  .attr(\"height\", h);\r\n\r\nvar force = d3.layout.force()\r\n    .size([w, h])\r\n\t.charge(function(d){\r\n\t\treturn(-10*(d.weight));\t//Larger nodes repel more strongly\r\n\t})\r\n\t.friction(0.5)\r\n    .linkDistance(function(d){\t\t//Larger distance for start and conversion nodes to help keep them at graph edges\r\n\t\tif(d.source['id'] == 0 || d.target['id'] == 1){\r\n\t\t\treturn 500;\r\n\t\t\t}\r\n\t\telse {\r\n\t\t\treturn 400;\r\n\t\t}\r\n\t})\r\n\t.linkStrength(0.1)\r\n\t.gravity(grav)\r\n\t.theta(0.5)\r\n\t//.alpha(0);\r\n\r\nvar drag = force.drag()\r\n    .on(\"dragstart\", dragstart);\r\n\r\nd3.json(\"data/force.json\", function(error, json) {\r\n  if (error) throw error;\r\n\r\n  force\r\n      .nodes(json.nodes)\r\n      .links(json.links)\r\n      .start();\r\n\r\n  var link = container.selectAll(\"line.link\")\r\n      .data(json.links)\r\n    .enter().append(\"svg:line\")\r\n      .attr(\"class\", \"link\")\r\n      .style(\"stroke-width\", function(d) { return 10*d.weight; })\r\n\t  .style(\"stroke\", function(d){\r\n\t\t  if(d.source.id != 0){\r\n\t\t\treturn fill(d.source.grouping);\r\n\t\t\t}\r\n\t\t  else return \"black\";\r\n\t  })\r\n      .attr(\"x1\", function(d) { return d.source.x; })\r\n      .attr(\"y1\", function(d) { return d.source.y; })\r\n      .attr(\"x2\", function(d) { return d.target.x; })\r\n      .attr(\"y2\", function(d) { return d.target.y; });\r\n\r\n  var node = container.selectAll(\"circle.node\")\r\n      .data(json.nodes)\r\n    .enter().append(\"svg:circle\")\r\n      .attr(\"class\", \"node\")\r\n      .attr(\"cx\", function(d) {\r\n\t\t  if(d.id == 0){\r\n\t\t\t  //console.log(\"fixed\");\r\n\t\t\t  d.x = -2000.0;\r\n\t\t\t  return d.x;\r\n\t\t\t  }\r\n\t\t  else if(d.id == 1){\r\n\t\t\t  d.x = 4000.0;\r\n\t\t\t  return d.x;\r\n\t\t\t  }\r\n\t\t  else\r\n\t\t\t  //console.log(d.x);\r\n\t\t\t  return d.grouping*20;\r\n\t\t  })\r\n      .attr(\"cy\", function(d) { return d.y; })\r\n      .attr(\"r\", function(d){ return 100*Math.sqrt(d.weighting); })\r\n      .style(\"fill\", function(d) {\r\n\t\t\tif(d.id != 0 && d.id != 1){\r\n\t\t\t\treturn fill(d.grouping);\r\n\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tfill(d.grouping);\r\n\t\t\t\t\treturn \"black\";\r\n\t\t\t})\r\n      .on(\"dblclick\", dblclick)\r\n      .call(drag);\r\n\r\n  node.append(\"svg:title\")\r\n      .text(function(d) { return d.name; });\r\n\r\n  var text = container.selectAll(\"text.node\")\r\n      .data(json.nodes)\r\n      .enter().append(\"text\")\r\n      .attr(\"dx\", function(d){ return d.x;})\r\n      .attr(\"dy\", function(d){ return d.y;})\r\n      .text(function(d){ return d.name; })\r\n      .attr(\"font-size\", \"10px\");\r\n\r\n\r\n\r\n\r\n  container.style(\"opacity\", 1e-6)\r\n    .transition()\r\n      .duration(1000)\r\n      .style(\"opacity\", 1);\r\n\r\n  force.on(\"tick\", function(e) {\r\n    link.attr(\"x1\", function(d) { return d.source.x; })\r\n        .attr(\"y1\", function(d) { return d.source.y; })\r\n        .attr(\"x2\", function(d) { return d.target.x; })\r\n        .attr(\"y2\", function(d) { return d.target.y; });\r\n\r\n    node.attr(\"cx\", function(d) { return d.x; })\r\n        .attr(\"cy\", function(d) { return d.y; });\r\n\r\n    text.attr(\"dx\", function(d){ return d.x + 20;})\r\n        .attr(\"dy\", function(d){ return d.y + 20;})\r\n\r\n\r\n  });\r\n});\r\n","// Dimensions of sunburst.\r\nvar width = 750;\r\nvar height = 600;\r\nvar radius = Math.min(width, height) / 2;\r\n\r\n// Breadcrumb dimensions: width, height, spacing, width of tip/tail.\r\nvar b = {\r\n  w: 75, h: 30, s: 3, t: 10\r\n};\r\n\r\n// Mapping of step names to colors.\r\nvar colors = {\r\n  \"home\": \"#5687d1\",\r\n  \"product\": \"#7b615c\",\r\n  \"search\": \"#de783b\",\r\n  \"account\": \"#6ab975\",\r\n  \"other\": \"#a173d1\",\r\n  \"end\": \"#bbbbbb\"\r\n};\r\n\r\n// Total size of all segments; we set this later, after loading the data.\r\nvar totalSize = 0;\r\n\r\nvar vis = d3.select(\"#chart\").append(\"svg:svg\")\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", height)\r\n    .append(\"svg:g\")\r\n    .attr(\"id\", \"container\")\r\n    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\r\n\r\nvar partition = d3.layout.partition()\r\n    .size([2 * Math.PI, radius * radius])\r\n    .value(function(d) { return d.size; });\r\n\r\nvar arc = d3.svg.arc()\r\n    .startAngle(function(d) { return d.x; })\r\n    .endAngle(function(d) { return d.x + d.dx; })\r\n    .innerRadius(function(d) { return Math.sqrt(d.y); })\r\n    .outerRadius(function(d) { return Math.sqrt(d.y + d.dy); });\r\n\r\n// Use d3.text and d3.csv.parseRows so that we do not need to have a header\r\n// row, and can receive the csv as an array of arrays.\r\nd3.text(\"data/visit-sequences.csv\", function(text) {\r\n  var csv = d3.csv.parseRows(text);\r\n  var json = buildHierarchy(csv);\r\n  createVisualization(json);\r\n});\r\n\r\n// Main function to draw and set up the visualization, once we have the data.\r\nfunction createVisualization(json) {\r\n\r\n  // Basic setup of page elements.\r\n  initializeBreadcrumbTrail();\r\n  drawLegend();\r\n  d3.select(\"#togglelegend\").on(\"click\", toggleLegend);\r\n\r\n  // Bounding circle underneath the sunburst, to make it easier to detect\r\n  // when the mouse leaves the parent g.\r\n  vis.append(\"svg:circle\")\r\n      .attr(\"r\", radius)\r\n      .style(\"opacity\", 0);\r\n\r\n  // For efficiency, filter nodes to keep only those large enough to see.\r\n  var nodes = partition.nodes(json)\r\n      .filter(function(d) {\r\n      return (d.dx > 0.005); // 0.005 radians = 0.29 degrees\r\n      });\r\n\r\n  var path = vis.data([json]).selectAll(\"path\")\r\n      .data(nodes)\r\n      .enter().append(\"svg:path\")\r\n      .attr(\"display\", function(d) { return d.depth ? null : \"none\"; })\r\n      .attr(\"d\", arc)\r\n      .attr(\"fill-rule\", \"evenodd\")\r\n      .style(\"fill\", function(d) { return colors[d.name]; })\r\n      .style(\"opacity\", 1)\r\n      .on(\"mouseover\", mouseover);\r\n\r\n  // Add the mouseleave handler to the bounding circle.\r\n  d3.select(\"#container\").on(\"mouseleave\", mouseleave);\r\n\r\n  // Get total size of the tree = value of root node from partition.\r\n  totalSize = path.node().__data__.value;\r\n };\r\n\r\n// Fade all but the current sequence, and show it in the breadcrumb trail.\r\nfunction mouseover(d) {\r\n\r\n  var percentage = (100 * d.value / totalSize).toPrecision(3);\r\n  var percentageString = percentage + \"%\";\r\n  if (percentage < 0.1) {\r\n    percentageString = \"< 0.1%\";\r\n  }\r\n\r\n  d3.select(\"#percentage\")\r\n      .text(percentageString);\r\n\r\n  d3.select(\"#explanation\")\r\n      .style(\"visibility\", \"\");\r\n\r\n  var sequenceArray = getAncestors(d);\r\n  updateBreadcrumbs(sequenceArray, percentageString);\r\n\r\n  // Fade all the segments.\r\n  d3.selectAll(\"path\")\r\n      .style(\"opacity\", 0.3);\r\n\r\n  // Then highlight only those that are an ancestor of the current segment.\r\n  vis.selectAll(\"path\")\r\n      .filter(function(node) {\r\n                return (sequenceArray.indexOf(node) >= 0);\r\n              })\r\n      .style(\"opacity\", 1);\r\n}\r\n\r\n// Restore everything to full opacity when moving off the visualization.\r\nfunction mouseleave(d) {\r\n\r\n  // Hide the breadcrumb trail\r\n  d3.select(\"#trail\")\r\n      .style(\"visibility\", \"hidden\");\r\n\r\n  // Deactivate all segments during transition.\r\n  d3.selectAll(\"path\").on(\"mouseover\", null);\r\n\r\n  // Transition each segment to full opacity and then reactivate it.\r\n  d3.selectAll(\"path\")\r\n      .transition()\r\n      .duration(1000)\r\n      .style(\"opacity\", 1)\r\n      .each(\"end\", function() {\r\n              d3.select(this).on(\"mouseover\", mouseover);\r\n            });\r\n\r\n  d3.select(\"#explanation\")\r\n      .style(\"visibility\", \"hidden\");\r\n}\r\n\r\n// Given a node in a partition layout, return an array of all of its ancestor\r\n// nodes, highest first, but excluding the root.\r\nfunction getAncestors(node) {\r\n  var path = [];\r\n  var current = node;\r\n  while (current.parent) {\r\n    path.unshift(current);\r\n    current = current.parent;\r\n  }\r\n  return path;\r\n}\r\n\r\nfunction initializeBreadcrumbTrail() {\r\n  // Add the svg area.\r\n  var trail = d3.select(\"#sequence\").append(\"svg:svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", 50)\r\n      .attr(\"id\", \"trail\");\r\n  // Add the label at the end, for the percentage.\r\n  trail.append(\"svg:text\")\r\n    .attr(\"id\", \"endlabel\")\r\n    .style(\"fill\", \"#000\");\r\n}\r\n\r\n// Generate a string that describes the points of a breadcrumb polygon.\r\nfunction breadcrumbPoints(d, i) {\r\n  var points = [];\r\n  points.push(\"0,0\");\r\n  points.push(b.w + \",0\");\r\n  points.push(b.w + b.t + \",\" + (b.h / 2));\r\n  points.push(b.w + \",\" + b.h);\r\n  points.push(\"0,\" + b.h);\r\n  if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.\r\n    points.push(b.t + \",\" + (b.h / 2));\r\n  }\r\n  return points.join(\" \");\r\n}\r\n\r\n// Update the breadcrumb trail to show the current sequence and percentage.\r\nfunction updateBreadcrumbs(nodeArray, percentageString) {\r\n\r\n  // Data join; key function combines name and depth (= position in sequence).\r\n  var g = d3.select(\"#trail\")\r\n      .selectAll(\"g\")\r\n      .data(nodeArray, function(d) { return d.name + d.depth; });\r\n\r\n  // Add breadcrumb and label for entering nodes.\r\n  var entering = g.enter().append(\"svg:g\");\r\n\r\n  entering.append(\"svg:polygon\")\r\n      .attr(\"points\", breadcrumbPoints)\r\n      .style(\"fill\", function(d) { return colors[d.name]; });\r\n\r\n  entering.append(\"svg:text\")\r\n      .attr(\"x\", (b.w + b.t) / 2)\r\n      .attr(\"y\", b.h / 2)\r\n      .attr(\"dy\", \"0.35em\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text(function(d) { return d.name; });\r\n\r\n  // Set position for entering and updating nodes.\r\n  g.attr(\"transform\", function(d, i) {\r\n    return \"translate(\" + i * (b.w + b.s) + \", 0)\";\r\n  });\r\n\r\n  // Remove exiting nodes.\r\n  g.exit().remove();\r\n\r\n  // Now move and update the percentage at the end.\r\n  d3.select(\"#trail\").select(\"#endlabel\")\r\n      .attr(\"x\", (nodeArray.length + 0.5) * (b.w + b.s))\r\n      .attr(\"y\", b.h / 2)\r\n      .attr(\"dy\", \"0.35em\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text(percentageString);\r\n\r\n  // Make the breadcrumb trail visible, if it's hidden.\r\n  d3.select(\"#trail\")\r\n      .style(\"visibility\", \"\");\r\n\r\n}\r\n\r\nfunction drawLegend() {\r\n\r\n  // Dimensions of legend item: width, height, spacing, radius of rounded rect.\r\n  var li = {\r\n    w: 75, h: 30, s: 3, r: 3\r\n  };\r\n\r\n  var legend = d3.select(\"#legend\").append(\"svg:svg\")\r\n      .attr(\"width\", li.w)\r\n      .attr(\"height\", d3.keys(colors).length * (li.h + li.s));\r\n\r\n  var g = legend.selectAll(\"g\")\r\n      .data(d3.entries(colors))\r\n      .enter().append(\"svg:g\")\r\n      .attr(\"transform\", function(d, i) {\r\n              return \"translate(0,\" + i * (li.h + li.s) + \")\";\r\n           });\r\n\r\n  g.append(\"svg:rect\")\r\n      .attr(\"rx\", li.r)\r\n      .attr(\"ry\", li.r)\r\n      .attr(\"width\", li.w)\r\n      .attr(\"height\", li.h)\r\n      .style(\"fill\", function(d) { return d.value; });\r\n\r\n  g.append(\"svg:text\")\r\n      .attr(\"x\", li.w / 2)\r\n      .attr(\"y\", li.h / 2)\r\n      .attr(\"dy\", \"0.35em\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text(function(d) { return d.key; });\r\n}\r\n\r\nfunction toggleLegend() {\r\n  var legend = d3.select(\"#legend\");\r\n  if (legend.style(\"visibility\") == \"hidden\") {\r\n    legend.style(\"visibility\", \"\");\r\n  } else {\r\n    legend.style(\"visibility\", \"hidden\");\r\n  }\r\n}\r\n\r\n// Take a 2-column CSV and transform it into a hierarchical structure suitable\r\n// for a partition layout. The first column is a sequence of step names, from\r\n// root to leaf, separated by hyphens. The second column is a count of how\r\n// often that sequence occurred.\r\nfunction buildHierarchy(csv) {\r\n  var root = {\"name\": \"root\", \"children\": []};\r\n  for (var i = 0; i < csv.length; i++) {\r\n    var sequence = csv[i][0];\r\n    var size = +csv[i][1];\r\n    if (isNaN(size)) { // e.g. if this is a header row\r\n      continue;\r\n    }\r\n    var parts = sequence.split(\"-\");\r\n    var currentNode = root;\r\n    for (var j = 0; j < parts.length; j++) {\r\n      var children = currentNode[\"children\"];\r\n      var nodeName = parts[j];\r\n      var childNode;\r\n      if (j + 1 < parts.length) {\r\n   // Not yet at the end of the sequence; move down the tree.\r\n \tvar foundChild = false;\r\n \tfor (var k = 0; k < children.length; k++) {\r\n \t  if (children[k][\"name\"] == nodeName) {\r\n \t    childNode = children[k];\r\n \t    foundChild = true;\r\n \t    break;\r\n \t  }\r\n \t}\r\n  // If we don't already have a child node for this branch, create it.\r\n \tif (!foundChild) {\r\n \t  childNode = {\"name\": nodeName, \"children\": []};\r\n \t  children.push(childNode);\r\n \t}\r\n \tcurrentNode = childNode;\r\n      } else {\r\n \t// Reached the end of the sequence; create a leaf node.\r\n \tchildNode = {\"name\": nodeName, \"size\": size};\r\n \tchildren.push(childNode);\r\n      }\r\n    }\r\n  }\r\n  return root;\r\n};\r\n","var margin = {top: 20, right: 120, bottom: 20, left: 120},\r\n    width = 960 - margin.right - margin.left,\r\n    height = 600 - margin.top - margin.bottom;\r\n\r\nvar i = 0,\r\n    duration = 750,\r\n    root;\r\n\r\nvar tree = d3.layout.tree()\r\n    .size([height, width]);\r\n\r\nvar diagonal = d3.svg.diagonal()\r\n    .projection(function(d) { return [d.y, d.x]; });\r\n\r\nvar svg = d3.select(\"#tree\").append(\"svg\")\r\n    .attr(\"width\", width + margin.right + margin.left)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n  .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\nd3.json(\"data/flare.json\", function(error, flare) {\r\n  if (error) throw error;\r\n\r\n  root = flare;\r\n  root.x0 = height / 2;\r\n  root.y0 = 0;\r\n\r\n  function collapse(d) {\r\n    if (d.children) {\r\n      d._children = d.children;\r\n      d._children.forEach(collapse);\r\n      d.children = null;\r\n    }\r\n  }\r\n\r\n  root.children.forEach(collapse);\r\n  update(root);\r\n});\r\n\r\nd3.select(self.frameElement).style(\"height\", \"800px\");\r\n\r\nfunction update(source) {\r\n\r\n  // Compute the new tree layout.\r\n  var nodes = tree.nodes(root).reverse(),\r\n      links = tree.links(nodes);\r\n\r\n  // Normalize for fixed-depth.\r\n  nodes.forEach(function(d) { d.y = d.depth * 180; });\r\n\r\n  // Update the nodes…\r\n  var node = svg.selectAll(\"g.node\")\r\n      .data(nodes, function(d) { return d.id || (d.id = ++i); });\r\n\r\n  // Enter any new nodes at the parent's previous position.\r\n  var nodeEnter = node.enter().append(\"g\")\r\n      .attr(\"class\", \"node\")\r\n      .attr(\"transform\", function(d) { return \"translate(\" + source.y0 + \",\" + source.x0 + \")\"; })\r\n      .on(\"click\", click);\r\n\r\n  nodeEnter.append(\"circle\")\r\n      .attr(\"r\", 1e-6)\r\n      .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\r\n\r\n  nodeEnter.append(\"text\")\r\n      .attr(\"x\", function(d) { return d.children || d._children ? -10 : 10; })\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"text-anchor\", function(d) { return d.children || d._children ? \"end\" : \"start\"; })\r\n      .text(function(d) { return d.name; })\r\n      .style(\"fill-opacity\", 1e-6);\r\n\r\n  // Transition nodes to their new position.\r\n  var nodeUpdate = node.transition()\r\n      .duration(duration)\r\n      .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; });\r\n\r\n  nodeUpdate.select(\"circle\")\r\n      .attr(\"r\", 4.5)\r\n      .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\r\n\r\n  nodeUpdate.select(\"text\")\r\n      .style(\"fill-opacity\", 1);\r\n\r\n  // Transition exiting nodes to the parent's new position.\r\n  var nodeExit = node.exit().transition()\r\n      .duration(duration)\r\n      .attr(\"transform\", function(d) { return \"translate(\" + source.y + \",\" + source.x + \")\"; })\r\n      .remove();\r\n\r\n  nodeExit.select(\"circle\")\r\n      .attr(\"r\", 1e-6);\r\n\r\n  nodeExit.select(\"text\")\r\n      .style(\"fill-opacity\", 1e-6);\r\n\r\n  // Update the links…\r\n  var link = svg.selectAll(\"path.link\")\r\n      .data(links, function(d) { return d.target.id; });\r\n\r\n  // Enter any new links at the parent's previous position.\r\n  link.enter().insert(\"path\", \"g\")\r\n      .attr(\"class\", \"link\")\r\n      .attr(\"d\", function(d) {\r\n        var o = {x: source.x0, y: source.y0};\r\n        return diagonal({source: o, target: o});\r\n      });\r\n\r\n  // Transition links to their new position.\r\n  link.transition()\r\n      .duration(duration)\r\n      .attr(\"d\", diagonal);\r\n\r\n  // Transition exiting nodes to the parent's new position.\r\n  link.exit().transition()\r\n      .duration(duration)\r\n      .attr(\"d\", function(d) {\r\n        var o = {x: source.x, y: source.y};\r\n        return diagonal({source: o, target: o});\r\n      })\r\n      .remove();\r\n\r\n  // Stash the old positions for transition.\r\n  nodes.forEach(function(d) {\r\n    d.x0 = d.x;\r\n    d.y0 = d.y;\r\n  });\r\n}\r\n\r\n// Toggle children on click.\r\nfunction click(d) {\r\n  if (d.children) {\r\n    d._children = d.children;\r\n    d.children = null;\r\n  } else {\r\n    d.children = d._children;\r\n    d._children = null;\r\n  }\r\n  update(d);\r\n}\r\n","var margin = {top: 20, right: 30, bottom: 30, left: 40},\r\n    width = 960 - margin.left - margin.right,\r\n    height = 500 - margin.top - margin.bottom,\r\n    padding = 0.3;\r\n\r\nvar yoyx = d3.scaleBand()\r\n    .rangeRound([0, width])\r\n    .paddingInner(padding);\r\n\r\nvar yoyy = d3.scaleLinear()\r\n    .range([height, 0]);\r\n\r\nvar yoyxaxis = d3.axisBottom()\r\n    .scale(yoyx);\r\n\r\nvar yoyyaxis = d3.axisLeft()\r\n    .scale(yoyy)\r\n    .tickFormat(function(d) { return dollarFormatter(d); });\r\n\r\nvar chart = d3.select(\"#yoy\")\r\n    .append(\"svg:svg\")\r\n    .attr(\"width\", width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n  .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\nd3.csv(\"data/yoy.csv\", type, function(error, data) {\r\n\r\n  // Transform data (i.e., finding cumulative values and total) for easier charting\r\n  var cumulative = 0;\r\n  for (var i = 0; i < data.length; i++) {\r\n    data[i].start = cumulative;\r\n    cumulative += data[i].value;\r\n    data[i].end = cumulative;\r\n\r\n    data[i].class = ( data[i].value >= 0 ) ? 'positive' : 'negative'\r\n  }\r\n  data.push({\r\n    name: '2016 Revenue',\r\n    end: cumulative,\r\n    start: 0,\r\n    class: 'total'\r\n  });\r\nconsole.log(data)\r\n\r\n  yoyx.domain(data.map(function(d) { return d.name; }));\r\n  yoyy.domain([0, d3.max(data, function(d) { return d.end; })]);\r\n\r\n  chart.append(\"g\")\r\n      .attr(\"class\", \"x axis\")\r\n      .attr(\"transform\", \"translate(0, 450)\")\r\n      .call(yoyxaxis);\r\n\r\n  chart.append(\"g\")\r\n      .attr(\"class\", \"y axis\")\r\n      .call(yoyyaxis);\r\n\r\n  var bar = chart.selectAll(\".bar\")\r\n      .data(data)\r\n    .enter().append(\"g\")\r\n      .attr(\"class\", function(d) { return \"bar \" + d.class })\r\n      .attr(\"transform\", function(d) { return \"translate(\" + yoyx(d.name) + \",0)\"; });\r\n\r\n  bar.append(\"rect\")\r\n      .attr(\"y\", function(d) { return yoyy( Math.max(d.start, d.end) ); })\r\n      .attr(\"height\", function(d) { return Math.abs( yoyy(d.start) - yoyy(d.end) ); })\r\n      .attr(\"width\", yoyx.bandwidth());\r\n\r\n  bar.append(\"text\")\r\n      .attr(\"x\", yoyx.bandwidth() / 2)\r\n      .attr(\"y\", function(d) { return yoyy(d.end) + 5; })\r\n      .attr(\"dy\", function(d) { return ((d.class=='negative') ? '-' : '') + \".75em\" })\r\n      .text(function(d) { return dollarFormatter(d.end - d.start);});\r\n\r\n  bar.filter(function(d) { return d.class != \"total\" }).append(\"line\")\r\n      .attr(\"class\", \"connector\")\r\n      .attr(\"x1\", yoyx.bandwidth() + 5 )\r\n      .attr(\"y1\", function(d) { return yoyy(d.end) } )\r\n      .attr(\"x2\", yoyx.bandwidth() / ( 1 - padding) - 5 )\r\n      .attr(\"y2\", function(d) { return yoyy(d.end) } )\r\n});\r\n\r\nfunction type(d) {\r\n  d.value = +d.value;\r\n  return d;\r\n}\r\n\r\nfunction dollarFormatter(n) {\r\n  n = Math.round(n);\r\n  var result = n;\r\n  if (Math.abs(n) > 1000) {\r\n    result = Math.round(n/1000) + 'K';\r\n  }\r\n  return '$' + result;\r\n}\r\n","var svg = d3.select(\"svg\"),\r\n    margin = {top: 20, right: 20, bottom: 30, left: 50},\r\n    width = +svg.attr(\"width\") - margin.left - margin.right,\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom,\r\n    g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\nvar parseTime = d3.timeParse(\"%H:%M:%S\");\r\n\r\nvar x = d3.scaleTime()\r\n    .rangeRound([0, width]);\r\n\r\nvar y = d3.scaleLinear()\r\n    .rangeRound([height, 0]);\r\n\r\n\r\nvar actual = d3.line()\r\n    .x(function(d) { return x(d.date); })\r\n    .y(function(d) { return y(d.close); });\r\n\r\n\r\nvar counterfactual = d3.line()\r\n    .x(function(d) { return x(d.date); })\r\n    .y(function(d) { return y(d.open); });\r\n\r\n\r\nvar incremental = d3.area()\r\n    .x(function(d, i) { return x(d.date); })\r\n    .y0(function(d) { return y(d.open); })\r\n    .y1(function(d) { return y(d.close); });\r\n\r\nd3.csv(\"data/lift.csv\", function(d) {\r\n  d.date = parseTime(d.date);\r\n  d.close = +d.close;\r\n  return d;\r\n}, function(error, data) {\r\n  if (error) throw error;\r\n\r\n  x.domain(d3.extent(data, function(d) { return d.date; }));\r\n  y.domain(d3.extent(data, function(d) { return d.close; }));\r\n\r\n  g.append(\"g\")\r\n      .attr(\"class\", \"axis axis--x\")\r\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n      .call(d3.axisBottom(x));\r\n\r\n  g.append(\"g\")\r\n      .attr(\"class\", \"axis axis--y\")\r\n      .call(d3.axisLeft(y))\r\n    .append(\"text\")\r\n      .attr(\"fill\", \"#000\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"y\", 6)\r\n      .attr(\"dy\", \"0.71em\")\r\n      .style(\"text-anchor\", \"end\")\r\n      .text(\"Web Visits\");\r\n\r\ng.append(\"g\")\r\n.attr(\"class\", \"label\")\r\n    .append(\"line\")\r\n      .attr(\"transform\", \"translate(0, -200)\")\r\n      .attr(\"y1\", 650)\r\n      .attr(\"y2\", 200)\r\n      .attr(\"x1\", 455)\r\n      .attr(\"x2\", 455)\r\n      .attr(\"stroke\", \"gray\")\r\n      .attr(\"stroke-dasharray\", \"5 5\");\r\n\r\n    d3.select(\".label\").append(\"text\")\r\n      .attr(\"transform\", \"translate(450, 0)\")\r\n      .attr(\"fill\", \"#393939\")\r\n      .style(\"text-anchor\", \"end\")\r\n      .text(\"Spot Airing Time\");\r\n\r\n\r\n  g.append(\"path\")\r\n      .datum(data)\r\n      .attr(\"class\", \"actual\")\r\n      .attr(\"d\", actual);\r\n\r\n  g.append(\"path\")\r\n      .datum(data)\r\n      .attr(\"class\", \"counterfactual\")\r\n      .attr(\"d\", counterfactual);\r\n\r\n  g.append(\"path\")\r\n      .datum(data)\r\n      .attr(\"class\", \"incremental\")\r\n      .attr(\"d\", incremental);\r\n});\r\n","var width = 400;\r\nvar height = 400;\r\n\r\nvar structureVis = d3.select(\"#structure\").append(\"svg:svg\")\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", height)\r\n\r\nvar margin = {top: 20, right: 20, bottom: 30, left: 50},\r\n    structg = structureVis.append(\"svg:g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"),\r\n    width = +structureVis.attr(\"width\") - margin.left - margin.right,\r\n    height = +structureVis.attr(\"height\") - margin.top - margin.bottom;\r\n\r\nstructg.append(\"rect\")\r\n    .attr(\"x\",70 )\r\n    .attr(\"y\", 0 )\r\n    .attr(\"height\", 50)\r\n    .attr(\"width\", 150)\r\n    .attr(\"fill\",\"steelblue\")\r\n    .attr(\"class\", \"serie\")\r\n.on(\"click\", function(){console.log(\"clicked\")});\r\n\r\nstructg.append(\"text\")\r\n  .text(\"Customer Base\")\r\n  .attr(\"x\",95 )\r\n  .attr(\"y\", 30 )\r\n  .attr(\"fill\", \"white\");\r\n\r\nstructg.append(\"path\")\r\n  .attr(\"d\", \"M150 50 V 70 H 80 V100\")\r\n.attr(\"fill\",\"transparent\")\r\n.attr(\"stroke\",\"black\");\r\n\r\nstructg.append(\"path\")\r\n  .attr(\"d\", \"M150 50 V 70 H 220 V100\")\r\n.attr(\"fill\",\"transparent\")\r\n.attr(\"stroke\",\"black\");\r\n\r\nstructg.append(\"path\")\r\n  .attr(\"d\", \"M80 150 V 180 H 30 V200\")\r\n.attr(\"fill\",\"transparent\")\r\n.attr(\"stroke\",\"black\");\r\n\r\nstructg.append(\"path\")\r\n  .attr(\"d\", \"M80 150 V 180 H 120 V200\")\r\n.attr(\"fill\",\"transparent\")\r\n.attr(\"stroke\",\"black\");\r\n\r\nstructg.append(\"rect\")\r\n    .attr(\"x\",30 )\r\n    .attr(\"y\", 100 )\r\n    .attr(\"height\", 50)\r\n    .attr(\"width\", 100)\r\n    .attr(\"fill\",\"steelblue\")\r\n    .attr(\"class\", \"serie\");\r\nstructg.append(\"text\")\r\n  .text(\"Online\")\r\n  .attr(\"x\",60 )\r\n  .attr(\"y\", 130 )\r\n  .attr(\"fill\", \"white\");\r\n\r\nstructg.append(\"rect\")\r\n    .attr(\"x\",170 )\r\n    .attr(\"y\", 100 )\r\n    .attr(\"height\", 50)\r\n    .attr(\"width\", 100)\r\n    .attr(\"fill\",\"steelblue\")\r\n    .attr(\"class\", \"serie\");\r\nstructg.append(\"text\")\r\n  .text(\"Offline\")\r\n  .attr(\"x\",200 )\r\n  .attr(\"y\", 130 )\r\n  .attr(\"fill\", \"white\");\r\n\r\nstructg.append(\"rect\")\r\n    .attr(\"x\",0 )\r\n    .attr(\"y\", 200 )\r\n    .attr(\"height\", 40)\r\n    .attr(\"width\", 70)\r\n    .attr(\"fill\",\"steelblue\")\r\n    .attr(\"class\", \"serie\");\r\nstructg.append(\"text\")\r\n  .text(\"New\")\r\n  .attr(\"x\",20 )\r\n  .attr(\"y\", 225 )\r\n  .attr(\"fill\", \"white\");\r\n\r\nstructg.append(\"rect\")\r\n    .attr(\"x\",80 )\r\n    .attr(\"y\", 200 )\r\n    .attr(\"height\", 40)\r\n    .attr(\"width\", 70)\r\n    .attr(\"fill\",\"steelblue\")\r\n    .attr(\"class\", \"serie\");\r\nstructg.append(\"text\")\r\n  .text(\"Repeat\")\r\n  .attr(\"x\", 93 )\r\n  .attr(\"y\", 225 )\r\n  .attr(\"fill\", \"white\");\r\n"]}